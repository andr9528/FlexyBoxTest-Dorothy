// <auto-generated />
using System;
using Dorothy.Proxy.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dorothy.Proxy.Migrations
{
    [DbContext(typeof(SuperSearchContext))]
    [Migration("20210107142301_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Dorothy.Proxy.Models.ResultProxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ResultProxyId");

                    b.Property<int>("ResultType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SearchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ToltalResults")
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("SearchId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.ResultStringProxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("ResultStringProxyId");

                    b.Property<string>("Link")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int>("ResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Snippet")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.ToTable("ResultStrings");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.SearchProxy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("SearchProxyId");

                    b.Property<int>("DesiredAmount")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExecutedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IncludeSubFolders")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .HasColumnType("TEXT");

                    b.Property<int>("Target")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Term")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("BLOB");

                    b.HasKey("Id");

                    b.ToTable("Searches");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.ResultProxy", b =>
                {
                    b.HasOne("Dorothy.Proxy.Models.SearchProxy", "Search")
                        .WithMany("Results")
                        .HasForeignKey("SearchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Search");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.ResultStringProxy", b =>
                {
                    b.HasOne("Dorothy.Proxy.Models.ResultProxy", "Result")
                        .WithMany("Results")
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.ResultProxy", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Dorothy.Proxy.Models.SearchProxy", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
